/*****************************************************************************************/
Follow up for "Search in Rotated Sorted Array":
What if duplicates are allowed?

Would this affect the run-time complexity? How and why?
Suppose an array sorted in ascending order is rotated at some pivot unknown to you beforehand.

(i.e., 0 1 2 4 5 6 7 might become 4 5 6 7 0 1 2).

Write a function to determine if a given target is in the array.

The array may contain duplicates.
/*****************************************************************************************/

class Solution {
public:
  bool search(vector<int> &nums, int target) {
    int len=nums.size();
    if(len==0)
        return false;
    int left =0, right = len-1;
    int mid = 0;
    while(left<right){
          mid=(left+right)/2;
          if(nums[mid]==target) 
            return true;
          if(nums[mid]>nums[right])
          {
              if(nums[mid]>target && nums[left] <= target) 
                right = mid;
              else 
                left = mid + 1;
          }
          else if(nums[mid] < nums[right])
          {
              if(nums[mid]<target && nums[right] >= target) 
                left = mid + 1;
              else 
                right = mid;
          }
          else
          {
              right--;
          }
          
    }
    return nums[left] == target ? true : false;
  }
};
