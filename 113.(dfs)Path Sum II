/*****************************************************************************************************/
Given a binary tree and a sum, find all root-to-leaf paths where each path's sum equals the given sum.

For example:
Given the below binary tree and sum = 22,
              5
             / \
            4   8
           /   / \
          11  13  4
         /  \    / \
        7    2  5   1
return
[
   [5,4,11,2],
   [5,8,4,5]
]
/*****************************************************************************************************/

class Solution {
public:
	void dfs1(TreeNode *root, vector<vector<int> > &ret, int target, int sum, vector<int> &tmp)
	{
	    if(root==NULL)
	        return ;
		tmp.push_back(root->val);
		if(sum+root->val==target && root->left==NULL && root->right==NULL)
		    ret.push_back(tmp);

		dfs1(root->left, ret, target, sum+root->val, tmp);
		dfs1(root->right, ret, target, sum+root->val, tmp);
		tmp.pop_back();
	}
    
    void dfs2(TreeNode *root , int left, vector<vector<int> > &ret, vector<int> &tmp){
        tmp.push_back(root->val);
        if(left-root->val == 0 && !root->left && !root->right)
            ret.push_back(tmp);
        else {
            if(root->left) dfs2(root->left, left-root->val, ret, tmp);
            if(root->right) dfs2(root->right, left-root->val, ret, tmp);
        }
        tmp.pop_back();
    }

    vector<vector<int> > pathSum(TreeNode* root,int target) {
		vector<vector<int> > ret;
		if(root==NULL)
			return ret;
		vector<int> tmp;
        int sum=0;
		//dfs(root, expectNumber, ret, tmp);
        dfs1(root, ret, target, sum, tmp);
		return ret;
    }
};
