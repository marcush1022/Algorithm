/************************************************************************/
Given a linked list, return the node where the cycle begins. If there is 
no cycle, return null.

Note: Do not modify the linked list.

Follow up:
Can you solve it without using extra space?
/************************************************************************/

class Solution
{
	public:
	ListNode *getMeetNode(ListNode *head)
	{
		ListNode *slow=head, *fast=head;
		while(slow!=NULL && fast!=NULL && fast->next!=NULL)
		{
			slow=slow->next;
			fast=fast->next->next;
			if(fast==slow)
				return fast;
		}
		return NULL;
	}
	
	ListNode *detectCycle(ListNode *head)
	{
		if(head==NULL)
			return head;
		ListNode *meet=getMeetNode(head);
		if(meet==NULL)
			return meet;
		
		int count=0;
		ListNode *front=meet;
		while(front->next!=meet)
		{
			front=front->next;
			++count;
		}
		
		front=head;
		ListNode *rear=head;
		for(int i=0; i<count; i++)
		{
			rear=rear->next;
		}
		
		while(rear->next!=front)
		{
			rear=rear->next;
			front=front->next;
		}
		
		return front;
	}
};
