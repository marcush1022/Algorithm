/**********************************************************************************/
Given a pattern and a string str, find if str follows the same pattern.

Here follow means a full match, such that there is a bijection between a letter in 
pattern and a non-empty word in str.

Examples:
pattern = "abba", str = "dog cat cat dog" should return true.
pattern = "abba", str = "dog cat cat fish" should return false.
pattern = "aaaa", str = "dog cat cat dog" should return false.
pattern = "abba", str = "dog dog dog dog" should return false.
Notes:
You may assume pattern contains only lowercase letters, and str contains lowercase 
letters separated by a single space.
/**********************************************************************************/

class Solution {
public:
    bool wordPattern(string pattern, string str) {
        int len1=pattern.length();
		int len2=str.length();

		if(len1==0 || len2==0)
			return false;

		map<char, string> map1;
		map<string, char> map2;
		vector<string> target;
		string tmp;
		for(int i=0; i<str.length(); i++)
		{
			while(str[i]!=' ' && str[i]!='\0')
            {
                tmp+=str[i];
                i++;
            }

			target.push_back(tmp);
			tmp="";
		}
		if(target.size()!=pattern.size())
			return false;
		for(int i=0; i<pattern.size(); i++)
		{
			if(map1.find(pattern[i])==map1.end() && map2.find(target[i])==map2.end())
			{
				map1.insert(make_pair(pattern[i], target[i]));
				map2.insert(make_pair(target[i], pattern[i]));
			}
			else
				if(map1[pattern[i]]!=target[i] || map2[target[i]]!=pattern[i])
					return false;
		}
		
		return true;
    }
};
