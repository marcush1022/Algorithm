/******************************************************************************/
Given a non negative integer number num. For every numbers i in the range 
0 ≤ i ≤ num calculate the number of 1's in their binary representation and 
return them as an array.

Example:
For num = 5 you should return [0,1,1,2,1,2].

I. One pass, better: 
/******************************************************************************/

class Solution {
public:
    
    vector<int> countBits(int num) {
        vector<int> bit(num+1);
        for(int i=0; i<=num; i++)
            bit[i]=bit[i>>1]+i%2;      //bit[i]=bit[i/2]+i%2
        return bit;
    }
};

II. Even faster: 
/******************************************************************************/

class Solution {
public:
    int getOne(int n)
    {
        int count=0;
        while(n)
        {
            count++;
            n=(n-1)&n;
        }
        return count;
    }
    
    vector<int> countBits(int num) {
        vector<int> ret;
        ret.push_back(0);
        if(num<0)
            return ret;
        for(int i=1; i<=num; i++)
            ret.push_back(getOne(i));
        return ret;
    }
};
