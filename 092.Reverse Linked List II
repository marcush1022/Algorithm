/*************************************************************************************/
Reverse a linked list from position m to n. Do it in-place and in one-pass.

For example:
Given 1->2->3->4->5->NULL, m = 2 and n = 4,

return 1->4->3->2->5->NULL.

Note:
Given m, n satisfy the following condition:
1 ≤ m ≤ n ≤ length of list.
/*************************************************************************************/

class Solution
{
	public:
	ListNode* reverseBetween(ListNode* head, int m, int n)
	{
		if(head==NULL || head->next==NULL)
			return head;
		ListNode* mhead=new ListNode(0);
		mhead->next=head;
		for(int i=0; i<m-1; i++)
			mhead=mhead->next;
		
		ListNode* prev=mhead->next;
		ListNode* cur=prev->next;
		
		for(int i=m; i<n; i++)
		{
			prev->next=cur->next;
			cur->next=mhead->next;
			mhead->next=cur;
			cur=prev->next;
		}
		return m == 1 ? mhead->next : head;
	}
};
