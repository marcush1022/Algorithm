/************************************************************************************************/
Design a stack that supports push, pop, top, and retrieving the minimum element in constant time.

push(x) -- Push element x onto stack.
pop() -- Removes the element on top of the stack.
top() -- Get the top element.
getMin() -- Retrieve the minimum element in the stack.
Example:
MinStack minStack = new MinStack();
minStack.push(-2);
minStack.push(0);
minStack.push(-3);
minStack.getMin();   --> Returns -3.
minStack.pop();
minStack.top();      --> Returns 0.
minStack.getMin();   --> Returns -2.
/************************************************************************************************/

class MinStack {
	public:
    	/** initialize your data structure here. */
	
    	stack<int> minStk;
	stack<int> dataStk;
    
    	void push(int x) 
	{
        	dataStk.push(x);
		if(minStk.size()==0 || minStk.top()>x)
			minStk.push(x);
		else
			minStk.push(minStk.top());
		
    	}
    
    	void pop() 
	{
        	dataStk.pop();
		minStk.pop();
    	}
    
    	int top() 
	{
        	return dataStk.top();
    	}
    
    	int getMin() 
	{
        	return minStk.top();
    	}
};

