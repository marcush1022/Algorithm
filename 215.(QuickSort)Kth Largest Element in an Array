/************************************************************************************************/
Find the kth largest element in an unsorted array. 
Note that it is the kth largest element in the sorted order, not the kth distinct element.

For example,
Given [3,2,1,5,6,4] and k = 2, return 5.

Note: 
You may assume k is always valid, 1 ≤ k ≤ array's length.
/************************************************************************************************/

class Solution {
public:
	int doPartition(vector<int> &nums, int left, int right)
	{
		int key = nums[left];
        	int low = left;
        	int high = right;
		while(low<high)
		{
			while(low<high && nums[high]>=key)
				high--;
			nums[low]=nums[high];
			while(low<high && nums[low]<=key)
				low++;
			nums[high]=nums[low];
		}
		nums[low]=key;
		return low;
	}
	void quickSort(vector<int> &nums, int left, int right)
	{
	    int pivo;
		if(left<right)
		{
			pivo=doPartition(nums, left, right);
			quickSort(nums, left, pivo-1);
			quickSort(nums, pivo+1, right);
		}

	}
    	int findKthLargest(vector<int>& nums, int k) {
        	if(k==0 || k>nums.size())
            		return -1;
        	quickSort(nums, 0, nums.size()-1);
        	cout<<"AFTER: "<<endl;
        	for(int i=0;i<nums.size();i++)
            		cout<<nums[i]<<",";
        	cout<<endl;
		return nums[nums.size()-k];
    	}
};

int main()
{
    vector<int> nums;
    nums.push_back(3);
    //nums.push_back(1);
    //nums.push_back(4);
    //nums.push_back(3);
    //nums.push_back(5);
    cout<<"size= "<<nums.size()<<endl;
    cout<<"BEFORE: "<<endl;
    for(int i=0;i<nums.size();i++)
            cout<<nums[i]<<",";
    cout<<endl;
    Solution s;
    cout<<s.findKthLargest(nums, 1);
}
