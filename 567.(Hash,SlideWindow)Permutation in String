/***************************************************************************************/
Given two strings s1 and s2, write a function to return true if s2 contains the 
permutation of s1. In other words, one of the first string's permutations is the substring 
of the second string.

Example 1:
Input:s1 = "ab" s2 = "eidbaooo"
Output:True
Explanation: s2 contains one permutation of s1 ("ba").
Example 2:
Input:s1= "ab" s2 = "eidboaoo"
Output: False
Note:
The input strings only contain lower case letters.
The length of both given strings is in range [1, 10,000].

Note:
使用滑动窗口Sliding Window的思想来做，可以使用两个哈希表来做，或者是使用一个哈希表配上双指针来做。
我们先来看使用两个哈希表来做的情况，我们先来分别统计s1和s2中前n1个字符串中各个字符出现的次数，其
中n1为字符串s1的长度，这样如果二者字符出现次数的情况完全相同，说明s1和s2中前n1的字符互为全排列
关系，那么符合题意了，直接返回true。如果不是的话，那么我们遍历s2之后的字符，对于遍历到的字符，对
应的次数加1，由于窗口的大小限定为了n1，所以每在窗口右侧加一个新字符的同时就要在窗口左侧去掉一个
字符，每次都比较一下两个哈希表的情况，如果相等，说明存在
/***************************************************************************************/

class Solution {
public:
    bool checkInclusion(string s1, string s2) {
        int len1=s1.length();
		int len2=s2.length();

		if(len1==0 && len2==0)
			return true;
		else if(len2==0)
			return false;

		vector<int> map1(26), map2(26);
		for(int i=0; i<len1; i++)
		{
			map1[s1[i]-'a']++;
			map2[s2[i]-'a']++;
		}

		if(map1==map2)
		    return true;

		for(int i=len1; i<len2; i++)
		{
			map2[s2[i]-'a']++;
			map2[s2[i-len1]-'a']--;
			if(map1==map2)
				return true;
		}
		return false;
    }
};
