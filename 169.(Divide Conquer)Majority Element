/**************************************************************************************/
Given an array of size n, find the majority element. The majority element is the element 
that appears more than ⌊ n/2 ⌋ times.

You may assume that the array is non-empty and the majority element always exist in the 
array.
/**************************************************************************************/

class Solution {
public:
	int doPartition(vector<int> &nums, int left, int right)
	{
		int val=nums[right];
		for(int i=left; i<right; i++)
		{
			if(nums[i]<val)
				swap(nums[left++], nums[i]);
		}
		swap(nums[left], nums[right]);
		return left;
	}

    int majorityElement(vector<int>& nums) {
        int len=nums.size();
		if(len==0)
			return -1;
		int pos=len/2, ans=0;
		int left=0, right=len-1;
		while((ans=doPartition(nums, left, right))!=pos)
		{
			if(ans>pos)
				right=ans-1;
			else
				left=ans+1;
		}
		return nums[pos];
    }
};
