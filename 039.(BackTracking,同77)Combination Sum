/*************************************************************************************************/
Given a set of candidate numbers (C) (without duplicates) and a target number (T), find all unique 
combinations in C where the candidate numbers sums to T.

The same repeated number may be chosen from C unlimited number of times.

Note:
All numbers (including target) will be positive integers.
The solution set must not contain duplicate combinations.
For example, given candidate set [2, 3, 6, 7] and target 7, 
A solution set is: 
[
  [7],
  [2, 2, 3]
]

Note: 回溯算法递归算法框架：
int a[n];
 try(int i)
 {
    if(i>n)
        输出结果;
      else
     {
        for(j = 下界; j <= 上界; j=j+1)  // 枚举i所有可能的路径
        {
            if(fun(j))                 // 满足限界函数和约束条件
              {
                 a[i] = j;
               ...                         // 其他操作
                 try(i+1);
               回溯前的清理工作（如a[i]置空值等）;
               }
          }
      }
 }
/*************************************************************************************************/

class Solution {
public:
	void getCombination(vector<int> &candidates, vector<int> &tmp, int index, int target, int sum, vector<vector<int>> &ret)
	{
		if(sum==target)
		{
			ret.push_back(tmp);
			return ;
		}
		if(sum>target)
			return ;
		for(int i=index; i<candidates.size(); i++)
		{
			sum+=candidates[i];
			tmp.push_back(candidates[i]);
			getCombination(candidates, tmp, i, target, sum, ret);
			tmp.pop_back();
			sum-=candidates[i];
		}
			
	}

    	vector<vector<int>> combinationSum(vector<int>& candidates, int target) {
        	vector<vector<int>> ret;
		if(candidates.size()==0)
			return ret;
		vector<int> tmp;
		getCombination(candidates, tmp, 0, target, 0, ret);
		return ret;
    }
};
