/**************************************************************************************/
Given a binary tree, return the bottom-up level order traversal of its nodes' values. 
(ie, from left to right, level by level from leaf to root).

For example:
Given binary tree [3,9,20,null,null,15,7],
    3
   / \
  9  20
    /  \
   15   7
return its bottom-up level order traversal as:
[
  [15,7],
  [9,20],
  [3]
]
/**************************************************************************************/

/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
 
class Solution {
public:
    vector<vector<int>> levelOrderBottom(TreeNode* root)
    {
		vector<vector<int>> ret;
	    if(root==NULL)
	        return ret ;
	        
        int level=0;
	    int count=1;
	    vector<int> tmp;
	  
	    queue<TreeNode*> q;
	    q.push(root);
	   
	    while(!q.empty())
	    {
			tmp.clear();
			level=0;
		
			for(int i=0;i<count;i++)
			{
				root=q.front();
				q.pop();
				tmp.push_back(root->val);
			
				if(root->left!=NULL)
				{
					q.push(root->left);
					level++;
				}
				if(root->right!=NULL)
				{
					q.push(root->right);
					level++;
				}
			}
			count=level;
			ret.push_back(tmp);
	    }
		
		reverse(ret.begin(), ret.end());
	    return ret;
    }
};
