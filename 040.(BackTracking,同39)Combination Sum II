/***************************************************************************************************************/
Given a collection of candidate numbers (C) and a target number (T), find all unique combinations in C where the 
candidate numbers sums to T.

Each number in C may only be used once in the combination.

Note:
All numbers (including target) will be positive integers.
The solution set must not contain duplicate combinations.
For example, given candidate set [10, 1, 2, 7, 6, 1, 5] and target 8, 
A solution set is: 
[
  [1, 7],
  [1, 2, 5],
  [2, 6],
  [1, 1, 6]
]

Note: 不同点: 
1. 有重复
2. 只能用一次
/***************************************************************************************************************/

class Solution {
public:
	void getCombination(vector<int> &candidates, vector<int> &tmp, int index, int target, int sum, vector<vector<int>> &ret)
	{
		if(sum==target)
		{
			ret.push_back(tmp);
			return ;
		}
		if(sum>target)
			return ;
		for(int i=index; i<candidates.size(); i++)
		{
			sum+=candidates[i];
			tmp.push_back(candidates[i]);
			getCombination(candidates, tmp, i+1, target, sum, ret);
			tmp.pop_back();
			sum-=candidates[i];
			while(i<candidates.size()-1 && candidates[i]==candidates[i+1])
			    i++;
		}
			
	}

    vector<vector<int>> combinationSum2(vector<int>& candidates, int target) {
        vector<vector<int>> ret;
		if(candidates.size()==0)
			return ret;
		std::sort(candidates.begin(), candidates.end());
		vector<int> tmp;
		getCombination(candidates, tmp, 0, target, 0, ret);
		return ret;
    }
};
