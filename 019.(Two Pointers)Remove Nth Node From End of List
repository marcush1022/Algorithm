/***********************************************************************************/
Given a linked list, remove the nth node from the end of list and return its head.

For example,

   Given linked list: 1->2->3->4->5, and n = 2.

   After removing the second node from the end, the linked list becomes 1->2->3->5.
Note:
Given n will always be valid.
Try to do this in one pass.
/***********************************************************************************/

class Solution
{
	public:
	ListNode* findNthFromEnd(ListNode *head, int n)
	{
		ListNode *fast, *slow;
		fast=slow=head;
		
		for(int i=0 ;i<n; i++)
		{
			if(fast->next!=NULL)
				fast=fast->next;
			else
				return NULL;
		}
		
		while(fast->next!=NULL)
		{
			fast=fast->next;
			slow=slow->next;
		}
		
		cout<<slow->val;
		return slow; //Return the node before need to be deleted
	}
	
	ListNode* removeNthFromEnd(ListNode *head, int n)
	{
		if(n==0 || head==NULL)
			return head;
		ListNode *p=findNthFromEnd(head, n);
		if(p==NULL)
		    return head->next;
		ListNode *toBeDeleted=p->next;
		
	
		p->next=p->next->next;
		
		delete toBeDeleted;
		
		return head;
	}
};













