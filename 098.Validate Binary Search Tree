/******************************************************************************/
Given a binary tree, determine if it is a valid binary search tree (BST).

Assume a BST is defined as follows:

The left subtree of a node contains only nodes with keys less than the node's key.
The right subtree of a node contains only nodes with keys greater than the node's key.
Both the left and right subtrees must also be binary search trees.
Example 1:
    2
   / \
  1   3
Binary tree [2,1,3], return true.
Example 2:
    1
   / \
  2   3
Binary tree [1,2,3], return false.
/******************************************************************************/

class Solution {
public:
    bool isValidBST(TreeNode* root) 
    {
        if(root==NULL)
            return true;
        vector<int> list;
		    inorderTraversal(root, list);
		    cout<<list.size();
		    for(int i=0; i<list.size()-1; i++)
		    {
			      if(list[i+1]<=list[i])
				        return false;
		    }
		    return true;
    }
	
  
	  void inorderTraversal(TreeNode* cur, vector<int> &list) //missed a & before list
	  {
		    if(cur==NULL)
			      return ;
		    if(cur->left!=NULL)
			      inorderTraversal(cur->left, list);
		    list.push_back(cur->val);
		    if(cur->right!=NULL)
			      inorderTraversal(cur->right, list);
	  }
};
