/*****************************************************************************/
Given a collection of distinct numbers, return all possible permutations.

For example,
[1,2,3] have the following permutations:
[
  [1,2,3],
  [1,3,2],
  [2,1,3],
  [2,3,1],
  [3,1,2],
  [3,2,1]
]
/*****************************************************************************/

class Solution {
public:
    vector<vector<int>> permute(vector<int>& nums) 
	  {
	    vector<vector<int>> ret;
	    if(nums.size()==0)
	        return ret;
        
		  int begin=0;
		
		  getPermute(nums, begin, ret);
		  return ret;
    }

    void getPermute(vector<int>& nums, int begin, vector<vector<int>>& ret) 
	  {
        
		  if(begin<nums.size())
		  {
			  for(int i=begin;i<nums.size();i++)
			  {
				  int temp=nums[i];
				  nums[i]=nums[begin];
				  nums[begin]=temp;
				
				  getPermute(nums, begin+1, ret);
				
				  temp=nums[i];
				  nums[i]=nums[begin];
				  nums[begin]=temp;
			  }
		  }
		  else
		  {
			  ret.push_back(nums);
		  }
		
		
    }
	

};
