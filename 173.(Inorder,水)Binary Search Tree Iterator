/****************************************************************************************/
Implement an iterator over a binary search tree (BST). Your iterator will be initialized
with the root node of a BST.

Calling next() will return the next smallest number in the BST.

Note: next() and hasNext() should run in average O(1) time and uses O(h) memory, where h 
is the height of the tree.
/****************************************************************************************/

class BSTIterator {
	private:

	queue<int> path;
	
	void inorderTree(TreeNode *root)
	{
		if(root==NULL)
			return ;
		if(root->left)
			inorderTree(root->left);
		path.push(root->val);
		if(root->right)
			inorderTree(root->right);
	}
	public:
    	BSTIterator(TreeNode *root) {
        	inorderTree(root);
    	}

	
    	/** @return whether we have a next smallest number */
    	bool hasNext() {
        	return (!path.empty());
    	}

    	/** @return the next smallest number */
    	int next() {
		int ret=0;
		if(!path.empty())
		{
			ret=path.front();
			path.pop();
		}
        	return ret;
    	}
};
