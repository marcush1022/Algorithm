/*******************************************************************************/
Follow up for "Unique Paths":

Now consider if some obstacles are added to the grids. How many unique paths 
would there be?

An obstacle and empty space is marked as 1 and 0 respectively in the grid.

For example,
There is one obstacle in the middle of a 3x3 grid as illustrated below.

[
  [0,0,0],
  [0,1,0],
  [0,0,0]
]
The total number of unique paths is 2.

Note: Beware of [0,1,0]
/*******************************************************************************/

class Solution {
public:
    int uniquePathsWithObstacles(vector<vector<int>>& obstacleGrid) {
        int rows=obstacleGrid.size();
		int cols=obstacleGrid[0].size();
		
		if (obstacleGrid.empty() || obstacleGrid[0].empty())
            return 0;
		
		if(obstacleGrid[0][0]==1)
		    return 0;
		
		vector<int> ret(cols);
		
    //Note: Dont use this:
    //vector<int> ret(cols, 1);
		
		//for(int j=0; j<cols; j++)
		//{
		//	if(obstacleGrid[0][j])
		//		ret[j]=0;
		//}
    
		for (int j = 0; j < cols && !obstacleGrid[0][j]; j++)
		     ret[j] = 1;
		
		for(int i=1; i<rows; i++)
		{
			if(obstacleGrid[i][0])
				ret[0]=0;
			for(int j=1; j<cols; j++)
			{
				if(obstacleGrid[i][j])
					ret[j]=0;
				else
					ret[j]+=ret[j-1];
			}
		}
		return ret[cols-1];
    }
};





