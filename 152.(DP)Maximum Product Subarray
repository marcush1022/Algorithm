/****************************************************************************************************/
Find the contiguous subarray within an array (containing at least one number) which has the largest product.

For example, given the array [2,3,-2,4],
the contiguous subarray [2,3] has the largest product = 6.

递推公式: max[i]=max[i-1]*num[i]
		OR min[i-1]*num[i]
		OR num[i];
/****************************************************************************************************/

class Solution
{
	public:
	int maxProduct(vector<int> &nums)
	{
		if(nums.size()==0)
			return 0;
		if(nums.size()==1)
			return nums[0];
		int max=nums[0], min=nums[0];
		int gobal=nums[0];
		for(int i=1; i<nums.size(); i++)
		{
			int a=max*nums[i];
			int b=min*nums[i];
			
			max=std::max(nums[i], std::max(a, b));
			min=std::min(nums[i], std::min(a, b));
			
			gobal=std::max(max, gobal);
		}
		return gobal;
	}
};
