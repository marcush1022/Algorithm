/*************************************************************************************/
Given a linked list and a value x, partition it such that all nodes less than x come 
before nodes greater than or equal to x.

You should preserve the original relative order of the nodes in each of the two partitions.

For example,
Given 1->4->3->2->5->2 and x = 3,
return 1->2->2->4->3->5.
/*************************************************************************************/

class Solution {
public:
    ListNode* partition(ListNode* head, int x) {
        if(head==NULL)
            return head;
        ListNode *dump=new ListNode(0);
		dump->next=head;
		ListNode *cur=dump;
		ListNode *par, *rec;
		
		while( cur->next!=NULL && cur->next->val<x)
			cur=cur->next;
		par=cur;
		rec=cur->next;
		
		while(cur->next!=NULL)
		{
			if(cur->next->val<x)
			{
				par->next=cur->next;
				par=par->next;
				cur->next=cur->next->next;
				par->next=rec;
				
			}
			else
				cur=cur->next;
		}
		
		return dump->next;
    }
};
